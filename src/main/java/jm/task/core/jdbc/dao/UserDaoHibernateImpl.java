package jm.task.core.jdbc.dao;

import jm.task.core.jdbc.model.User;
import jm.task.core.jdbc.util.Util;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;

import java.util.List;

public class UserDaoHibernateImpl implements UserDao {
    public UserDaoHibernateImpl() {

    }
    SessionFactory sessionFactory = Util.getSessionFactory();

    @Override
    public void createUsersTable() {
        try {
            Session session = sessionFactory.getCurrentSession();
            session.beginTransaction();
            String sql = """
                CREATE TABLE IF NOT EXISTS userTable(
                id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                name VARCHAR(128) NOT NULL,
                last_name VARCHAR(128)NOT NULL ,
                age INT NOT NULL
                );
                """;
            session.createNativeQuery(sql).executeUpdate();
            session.getTransaction().commit();
        }catch (HibernateException e){
            throw new RuntimeException(e);
        }
    }

    @Override
    public void dropUsersTable() {
        try {
            Session session = sessionFactory.getCurrentSession();
            session.beginTransaction();
            String sql = """
                DROP TABLE IF EXISTS userTable;
                """;
            session.createNativeQuery(sql).executeUpdate();

            session.getTransaction().commit();

        }catch (HibernateException e){
            throw  new RuntimeException(e);
        }
    }

    @Override
    public void saveUser(String name, String lastName, byte age) {
        try {
            Session session = sessionFactory.getCurrentSession();
            session.beginTransaction();

            User user =new User(name,lastName,age);
            session.save(user);

            session.getTransaction().commit();
        }catch (HibernateException e){
            throw new RuntimeException(e);
        }
    }

    @Override
    public void removeUserById(long id) {
        try {
            Session session = sessionFactory.getCurrentSession();
            session.beginTransaction();

            User user = session.get(User.class,id);
            session.delete(user);
            session.getTransaction().commit();
        }catch (HibernateException e){
            throw new RuntimeException(e);
        }
    }

    @Override
    public List<User> getAllUsers() {
        List<User>userList;
        try {
            Session session = sessionFactory.getCurrentSession();
            session.beginTransaction();

            String hql = "FROM User";
            userList=session.createQuery(hql).getResultList();

            session.getTransaction().commit();
            return userList;
        }catch (HibernateException e){
            throw new RuntimeException(e);
        }

    }


    @Override
    public void cleanUsersTable() {
        try {
            Session session = sessionFactory.getCurrentSession();
            session.beginTransaction();

            String hql = "DELETE FROM User";
            session.createQuery(hql).executeUpdate();
            session.getTransaction().commit();
        }catch (HibernateException e){
            throw new RuntimeException(e);
        }
    }
}